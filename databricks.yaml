name: Databricks Job Creation/Update

on:
  push:
    branches:
      - main  # Adjust the branch as needed
    paths:
      - 'job_config.json'  # Trigger only when this file changes

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install Databricks CLI
      run: |
        pip install databricks-cli jq

    - name: Authenticate with Databricks
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      run: |
        # Validate authentication
        databricks jobs list || exit 1

    - name: Check if Job Exists
      id: check_job
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      run: |
        JOB_NAME=$(jq -r '.name' job_config.json)
        JOB_ID=$(databricks jobs list --output json | jq -r --arg name "$JOB_NAME" '.jobs[] | select(.settings.name == $name) | .job_id')

        if [ -z "$JOB_ID" ]; then
          echo "Job does not exist, creating a new job..."
          echo "JOB_EXISTS=false" >> $GITHUB_ENV
        else
          echo "Job exists with ID: $JOB_ID, updating job..."
          echo "JOB_EXISTS=true" >> $GITHUB_ENV
          echo "JOB_ID=$JOB_ID" >> $GITHUB_ENV
        fi

    - name: Create New Job
      if: env.JOB_EXISTS == 'false'
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      run: |
        databricks jobs create --json-file job_config.json

    - name: Update Existing Job
      if: env.JOB_EXISTS == 'true'
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      run: |
        databricks jobs reset --job-id $JOB_ID --json-file job_config.json


################################################################################

name: Databricks Job Creation/Update

on:
  push:
    branches:
      - main  # Trigger on push to the main branch
    paths:
      - 'env/dev.conf'  # Trigger only if dev.conf changes
      - 'job.json'      # Trigger only if job.json changes

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python and install Databricks CLI
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Databricks CLI
        run: |
          pip install databricks-cli

      # Step 3: Install jq (for JSON parsing)
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      # Step 4: Configure Databricks CLI with token
      - name: Configure Databricks CLI
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          databricks configure --token --host $DATABRICKS_HOST --token $DATABRICKS_TOKEN

      # Step 5: Substitute values from dev.conf into job.json
      - name: Substitute values into job.json
        run: |
          SED_COMMAND=""
          while IFS='=' read -r key value; do
            key=$(echo "$key" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' -e 's/^"//' -e 's/"$//')
            value=$(echo "$value" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' -e 's/^"//' -e 's/"$//')
            SED_COMMAND+=" -e 's/{{$key}}/$value/g'"
          done < <(grep -v '^#' env/dev.conf | grep '=')
          eval "sed $SED_COMMAND job.json > final_job.json"

      # Step 6: Check if the job already exists
      - name: Check if job exists
        id: check-job
        run: |
          JOB_NAME=$(grep 'JOB_NAME' env/dev.conf | cut -d'=' -f2 | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' -e 's/^"//' -e 's/"$//')
          EXISTING_JOBS=$(databricks jobs list --output JSON | jq -r '.jobs[] | select(.settings.name == "'"$JOB_NAME"_dental'"") | .job_id')
          echo "EXISTING_JOBS=$EXISTING_JOBS" >> $GITHUB_OUTPUT

      # Step 7: Create or update the job
      - name: Create or update job
        run: |
          if [ -z "${{ steps.check-job.outputs.EXISTING_JOBS }}" ]; then
            echo "Creating new job: ${JOB_NAME}_dental"
            databricks jobs create --json-file final_job.json
          else
            echo "Updating existing job: ${JOB_NAME}_dental (ID: ${{ steps.check-job.outputs.EXISTING_JOBS }})"
            databricks jobs reset --job-id ${{ steps.check-job.outputs.EXISTING_JOBS }} --json-file final_job.json
          fi
